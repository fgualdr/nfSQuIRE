/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    crisprSNF Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs

singularity.enabled = true
process.container = '/hpcnfs/techunits/bioinformatics/singularity/genomics21_2.12.sif'
singularity.envWhitelist = 'LD_PRELOAD,PETASUITE_REFPATH'
process.executor = 'pbspro'
process.queue = 'workq'
executor.queueSize = 5
process.scratch = '/hpcnfs/scratch/GN/fgualdrini/nexflow_temp/'
singularity.runOptions = ' --bind /hpcnfs/ '

manifest {
    name            = 'nfSQuIRE'
    author          = 'Gualdrini Francesco'
    homePage        = 'https://github.com/fgualdr/nfSQuIRE'
    description     = 'Nextflow execution of SQuIRE see https://github.com/wyang17/SQuIRE'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '3.8.1'
}


env {
    PATH='$PATH:/hpcnfs/software/singularity/3.7.0/bin/:/hpcnfs/software/anaconda/anaconda3/bin/'
    NXF_SINGULARITY_CACHEDIR = '/hpcnfs/data/GN2/fgualdrini/tools/nf-cachedir'
}

tower {
  accessToken = 'eyJ0aWQiOiA1MDk1fS5mNTk4M2I2NzdkYjQzNDJhMDM3MjU5NjZiYmEwYjQzMjMzNDhiZjU0'
  enabled = true
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


// Defaults only, expecting to be overwritten
params.max_memory = 60.GB
params.max_cpus = 24
params.max_time = 240.h

process {

    publishDir = [
                path:  { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: 'copy'
                ]
    stageInMode = 'symlink'
    stageOutMode = 'copy'

	cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

   	errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'
	
	withLabel: local {
	        executor = 'local'
    	}

	withLabel: 'process_low' {
        executor = 'pbspro'
        queue = 'workq'
        cpus = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
		time   = { check_max( 4.h   * task.attempt, 'time'    ) }
		errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
        maxRetries    = 1
        maxErrors     = '-1'
	}

	withLabel: 'process_medium' {
		executor = 'pbspro'
        queue = 'workq'
		cpus = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
        errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
        maxRetries    = 1
        maxErrors     = '-1'
		process.clusterOptions = "-l maxarray_5=1"
	}

	withLabel: 'process_high|process_high_memory|process_long' {
                executor = 'pbspro'
                queue = 'workq'
		        cpus = { check_max( 14     * task.attempt, 'cpus'    ) }
                memory = { check_max( 24.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 16.h   * task.attempt, 'time'    ) }
                errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
                maxRetries    = 1
                maxErrors     = '-1'
                process.clusterOptions = "-l maxarray_5=1"
    }

    withName: 'STAR_INDEX' {
            executor = 'pbspro'
            queue = 'workq'
            cpus = { check_max( 20     * task.attempt, 'cpus'    ) }
            memory = { check_max( 40.GB * task.attempt, 'memory'  ) }
            time   = { check_max( 16.h   * task.attempt, 'time'    ) }
            errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
            maxRetries    = 1
            maxErrors     = '-1'
            process.clusterOptions = "-l maxarray_5=1"
    }


    withName: 'MAP' {
            executor = 'pbspro'
            queue = 'workq'
            cpus = { check_max( 20     * task.attempt, 'cpus'    ) }
            memory = { check_max( 40.GB * task.attempt, 'memory'  ) }
            time   = { check_max( 16.h   * task.attempt, 'time'    ) }
            errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
            maxRetries    = 1
            maxErrors     = '-1'
            process.clusterOptions = "-l maxarray_5=1"
    }

    withLabel: 'process_high_ram' {
		executor = 'pbspro'
        queue = 'workq'
		cpus = { check_max( 10     * task.attempt, 'cpus'    ) }
        memory = { check_max( 40.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 48.h   * task.attempt, 'time'    ) }
        errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
        maxRetries    = 1
        maxErrors     = '-1'
		process.clusterOptions = "-l maxarray_5=1"
	}


}

